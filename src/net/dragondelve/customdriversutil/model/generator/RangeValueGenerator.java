// Copyright 2023 Prokhor Kalinin
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package net.dragondelve.customdriversutil.model.generator;

import net.dragondelve.customdriversutil.util.DDUtil;

import java.util.Random;
import java.util.logging.Level;

/**
 * Generates values for each of the double parameters of the driver ranging from 0 to 1, or a floor and ceiling values
 * that are passed to it. Generates values for each driver by slowly increasing values per each driver and adding some
 * percentage of noise to those values. Amount of noise is determined by the noise value set when creating an instance.
 */
public class RangeValueGenerator implements ValueGenerator {
    /**
     * Pseudo random generator used to generate noise values.
     */
    Random random = new Random();

    /**
     * Number of drivers in the range.
     */
    private final int nDrivers;

    /**
     * Determines the range value part of the range generator.
     */
    private int currentDriver = 0;

    /**
     * Minimum value that will be generated by the generator.
     */
    private double floor = 0.0;

    /**
     * Maximum value that will be generated by the generator.
     */
    private double ceiling = 1.0;

    /**
     * Value ranging from 0.0 to 1.0 that determines what percentage of the values generated will be random,
     */
    private final double noise;

    /**
     * Creates a new Instance of RangeValueGenerator.
     * @param nDrivers Number of drivers in the range.
     * @param noise Value ranging from 0.0 to 1.0 that determines what percentage of the values generated will be random,
     */
    public RangeValueGenerator(int nDrivers, double noise) {
        this.nDrivers = nDrivers;
        this.noise = noise;
    }

    /**
     * Informs the generator that you're done generating values for the current driver. You don't need to call it on
     * your first driver.
     */
    @Override
    public void nexDriver() {
        currentDriver++;
    }

    /**
     * Generates a new double between floor and ceiling (0.0 and 1.0 by default).
     * @return g
     */
    @Override
    public double nextValue() {
        double noiseValue = random.nextDouble() * noise;
        double rangeChange = 1.0 / nDrivers;
        double rangeValue = rangeChange*currentDriver * (1 - noise);
        return (noiseValue + rangeValue) * (ceiling - floor) + floor;
    }

    /**
     * Semi Lightweight mutator method.
     * @param floor Minimum value for any value generated by this generator cannot exceed 1.0 and can't be below 0.
     * @param ceiling Maximum value generated by this generator. Has to be positive and cannot exceed 1.0.
     */
    @Override
    public void setLimits(double floor, double ceiling) {
        if(floor > ceiling)
            DDUtil.DEFAULT_LOGGER.log(Level.WARNING, "Range Value generator received floor that is larger than the ceiling, Limits will not be set");
        else if (floor < 0.0 || floor > 1.0)
            DDUtil.DEFAULT_LOGGER.log(Level.WARNING, "Range Value generator received floor '" + floor + "' that is an incorrect value");
        else if (ceiling < 0.0 || ceiling > 1.0)
            DDUtil.DEFAULT_LOGGER.log(Level.WARNING, "Range Value generator received ceiling '" + floor + "' that is an incorrect value");
        else {
            this.floor = floor;
            this.ceiling = ceiling;
        }
    }
}
